// src/commands/pantest/poctest.rs
use clap::Args;
use libloading::{Library, Symbol};
use std::ffi::CString;
use std::path::Path;
use std::env::consts::OS;

/// 命令行参数结构体
#[derive(Args, Debug)]
pub struct PocTest {
    /// 目标 IP 地址
    #[arg(short, long)]
    pub ip: String,

    /// 端口号（可选）
    #[arg(short, long)]
    pub port: Option<u16>,

    /// 指定漏洞名称（即.so 文件名，不含后缀）
    #[arg(long)]
    pub poc: Option<String>,
}

/// `bool check(const char*, u16)`
type CheckFunc = unsafe extern "C" fn(*const std::os::raw::c_char, u16) -> bool;

/// `u16 default_port()`
type DefaultPortFunc = unsafe extern "C" fn() -> u16;

/// 主运行函数（修改为异步函数）
pub async fn run(args: &PocTest) -> anyhow::Result<()> {
    let poc_dir = Path::new("pocs"); // 动态库目录
    // 根据操作系统选择正确的扩展名
    let ext = match OS {
        "windows" => "dll", // Windows 上使用 .dll
        "macos" => "dylib", // macOS 上使用 .dylib
        _ => "so", // 默认使用 .so (Linux)
    };
    if let Some(poc_name) = &args.poc {
        let path = poc_dir.join(format!("{}.{}", poc_name, ext));
        run_single_poc(&path, &args.ip, args.port).await?; // 处理单个 PoC 库
    } else {
        for entry in std::fs::read_dir(poc_dir)? {
            let entry = entry?;
            let path = entry.path();

            if path.extension().and_then(|e| e.to_str()) != Some("so") {
                continue;
            }
            run_single_poc(&path, &args.ip, args.port).await?; // 处理 PoC 库目录下所有.so文件
        }
    }

    Ok(())
}

async fn run_single_poc(lib_path: &Path, ip: &str, port_opt: Option<u16>) -> anyhow::Result<()> {
    println!("加载 PoC 动态库：{}", lib_path.display());

    let lib = unsafe { Library::new(lib_path)? };

    let check: Symbol<CheckFunc> = unsafe { lib.get(b"check")? };
    let default_port: Symbol<DefaultPortFunc> = unsafe { lib.get(b"default_port")? };

    let port = port_opt.unwrap_or_else(|| unsafe { default_port() });
    let ip_c = CString::new(ip)?;

    let result = unsafe { check(ip_c.as_ptr(), port) };

    println!(
        "检测结果 => 目标 {}:{} => {}",
        ip,
        port,
        if result { "存在漏洞" } else { "未发现漏洞" }
    );

    Ok(())
}
