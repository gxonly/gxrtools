use crate::commands::net::ping::ping_concurrent_async;
use crate::commands::pentest::port_handshake::*;
use crate::commands::pentest::port_list::*;
use crate::utils::{ScanProgress, parse_ports, parse_targets, save_to_excel};
use clap::Parser;
use futures::stream::{FuturesUnordered, StreamExt};
use std::error::Error;
use std::net::SocketAddr;
use std::sync::Arc;
use std::time::{Duration, Instant};
use tokio::io::AsyncReadExt;
use tokio::net::TcpStream;
use tokio::sync::Mutex;

#[derive(Parser, Debug)]
pub struct PortScan {
    /// IP 或 IP 段（支持CIDR、范围、多个IP用逗号隔开）
    #[arg(short, long)]
    pub targets: String,

    /// 自定义端口（用逗号隔开，例如：80,443,22）
    #[arg(short, long)]
    pub ports: Option<String>,

    /// 是否扫描全部端口（1-65535）
    #[arg(long, default_value = "false")]
    pub full: bool,

    /// 最大并发数
    #[arg(short = 'c', long, default_value = "1000")]
    pub concurrency: usize,

    /// 输出到excel
    #[arg(long, default_value = "false")]
    pub output: bool,

    /// 主机存活探测
    #[arg(long, default_value = "false")]
    pub live: bool,
}

#[derive(Debug, Clone)]
pub struct PortScanResult {
    pub ip: String,
    pub port: u16,
    pub status: String,
    pub banner: String,
}

pub async fn run(args: &PortScan) -> Result<(), Box<dyn Error + Send + Sync>> {
    let start = Instant::now();

    let ips = parse_targets(&args.targets)?;
    let live_ips: Vec<String>;
    if args.live {
        let ping_results = ping_concurrent_async(
            ips.clone(),
            3,
            2,
            100,
            &mut ScanProgress::new(ips.len() as u64),
        )
        .await?;
        live_ips = ping_results
            .into_iter()
            .filter(|r| r.status == "成功")
            .map(|r| r.ip)
            .collect();
    } else {
        live_ips = ips.clone();
    }
    let ports: Vec<u16> = if args.full {
        (1..=65535).collect()
    } else if let Some(pstr) = &args.ports {
        parse_ports(pstr)
    } else {
        DEFAULT_PORTS.to_vec()
    };
    if live_ips.is_empty() {
        println!("没有有效的 IP 地址可供扫描");
        return Ok(()); // 或其他适当的返回
    }
    println!(
        "🔍 共 {} 个IP，{} 个端口待扫描",
        live_ips.len(),
        ports.len() * live_ips.len()
    );

    let result_arc = Arc::new(Mutex::new(Vec::new()));
    let total_tasks = (live_ips.len() * ports.len()) as u64;

    // 添加进度条
    let progress = ScanProgress::new(total_tasks);

    let mut tasks = FuturesUnordered::new();

    for ip in live_ips {
        for &port in &ports {
            while tasks.len() >= args.concurrency {
                tasks.next().await;
            }
            let ip = ip.clone();
            let result_arc = result_arc.clone();
            let progress = progress.clone();

            tasks.push(tokio::spawn(async move {
                let socket = format!("{}:{}", ip, port);
                let addr: SocketAddr = match socket.parse() {
                    Ok(a) => a,
                    Err(_) => {
                        progress.inc();
                        return;
                    }
                };

                let (status, banner) =
                    match tokio::time::timeout(Duration::from_secs(2), TcpStream::connect(addr))
                        .await
                    {
                        Ok(Ok(mut stream)) => {
                            let mut buf = vec![0; 1024];
                            let mut banner = String::new();

                            if let Ok(Ok(n)) = tokio::time::timeout(
                                Duration::from_millis(300),
                                stream.read(&mut buf),
                            )
                            .await
                            {
                                if n > 0 {
                                    banner = extract_banner_text(&buf[..n]);
                                }
                            }

                            if banner.trim().is_empty() {
                                if let Some(service) = DEFAULT_PORT_BANNERS.get(&port) {
                                    banner = service.to_string();
                                }
                            }

                            if banner.trim().is_empty() {
                                if let Some(http_banner) =
                                    try_http_probe(&mut stream, &ip, &mut buf).await
                                {
                                    banner = http_banner;
                                }
                            }

                            ("开放", banner)
                        }
                        _ => ("关闭", String::new()),
                    };

                if status == "开放" {
                    // ✅ 不破坏进度条，打印在上方
                    progress.println(format!("{} => {:<5} | 开放 | 服务: {}", ip, port, banner));
                }

                {
                    let mut result = result_arc.lock().await;
                    result.push(PortScanResult {
                        ip,
                        port,
                        status: status.to_string(),
                        banner,
                    });
                }

                progress.inc();
            }));
        }
    }

    while let Some(_) = tasks.next().await {}

    progress.finish();

    let results = Arc::try_unwrap(result_arc).unwrap().into_inner();

    if args.output {
        save_to_excel(
            &results,
            &["IP地址", "端口", "状态", "服务"],
            |r| {
                vec![
                    r.ip.clone(),
                    r.port.to_string(),
                    r.status.clone(),
                    r.banner.clone(),
                ]
            },
            "portscan",
            "portscan",
        )?;
    }

    let elapsed = start.elapsed();
    println!(
        "✅ 扫描完成，共发现 {} 个开放端口",
        results.iter().filter(|r| r.status == "开放").count()
    );
    println!("⏱️ 总耗时：{elapsed:.2?}");

    Ok(())
}
