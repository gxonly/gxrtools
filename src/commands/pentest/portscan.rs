// src/commands/pentest/portscan.rs
use crate::commands::net::ping::ping_concurrent_async;
use crate::commands::pentest::port_handshake::*;
use crate::commands::pentest::port_list::*;
use crate::utils::{ScanProgress, parse_ports, parse_targets, save_to_excel};
use clap::Parser;
use futures::stream::{FuturesUnordered, StreamExt};
use std::error::Error;
use std::net::SocketAddr;
use std::sync::Arc;
use std::time::{Duration, Instant};
use tokio::net::TcpStream;
use tokio::sync::{Mutex, Semaphore};
use crate::commands::pentest::fingerprint::load_fingerprints;

#[derive(Parser, Debug)]
pub struct PortScan {
    /// IP 或 IP 段（支持CIDR、范围、多个IP用逗号隔开）
    #[arg(short, long)]
    pub targets: String,

    /// 自定义端口（用逗号隔开，例如：80,443,22）
    #[arg(short, long)]
    pub ports: Option<String>,

    /// 是否扫描全部端口（1-65535）
    #[arg(long, default_value = "false")]
    pub full: bool,

    /// 最大并发数
    #[arg(short = 'c', long, default_value = "200")]
    pub concurrency: usize,

    /// 输出到excel
    #[arg(long, default_value = "false")]
    pub output: bool,

    /// 主机存活探测
    #[arg(long, default_value = "false")]
    pub live: bool,
}

#[derive(Debug, Clone)]
pub struct PortScanResult {
    pub ip: String,
    pub port: u16,
    pub status: String,
    pub banner: String,
    pub evidence: Vec<String>,
}


pub async fn run(args: &PortScan) -> Result<(), Box<dyn Error + Send + Sync>> {
    let fps = load_fingerprints("fingerprints.yaml")?;

    let start = Instant::now();

    let ips = parse_targets(&args.targets)?;
    let live_ips: Vec<String>;
    if args.live {
        let ping_results = ping_concurrent_async(
            ips.clone(),
            3,
            2,
            100,
            &mut ScanProgress::new(ips.len() as u64),
        )
            .await?;
        live_ips = ping_results
            .into_iter()
            .filter(|r| r.status == "成功")
            .map(|r| r.ip)
            .collect();
    } else {
        live_ips = ips.clone();
    }

    let ports: Vec<u16> = if args.full {
        (1..=65535).collect()
    } else if let Some(pstr) = &args.ports {
        parse_ports(pstr)
    } else {
        DEFAULT_PORTS.to_vec()
    };

    if live_ips.is_empty() {
        println!("没有有效的 IP 地址可供扫描");
        return Ok(());
    }

    let total_tasks = (live_ips.len() * ports.len()) as u64;
    println!("🔍 共 {} 个IP，{} 个端口待扫描", live_ips.len(), total_tasks);

    let result_arc = Arc::new(Mutex::new(Vec::<PortScanResult>::new()));
    let progress = ScanProgress::new(total_tasks);

    // concurrency 控制
    let sem = Arc::new(Semaphore::new(args.concurrency));
    let mut tasks = FuturesUnordered::new();

    for ip in live_ips {
        for &port in &ports {
            let permit = sem.clone().acquire_owned().await.unwrap();
            let ip_cloned = ip.clone();
            let result_arc = result_arc.clone();
            let progress = progress.clone();
            let fps = fps.clone();

            tasks.push(tokio::spawn(async move {
                let _permit = permit;

                let socket = format!("{}:{}", ip_cloned, port);
                let _addr: SocketAddr = match socket.parse() {
                    Ok(a) => a,
                    Err(_) => {
                        progress.inc();
                        return;
                    }
                };

                let mut evidence: Vec<String> = Vec::new();
                let mut banner = String::new();
                let mut status = "关闭".to_string();

                // 先做 connect+read 尝试快速抓取 banner
                let addr_str = format!("{}:{}", ip_cloned, port);
                if let Some(buf) = connect_and_read(
                    &addr_str,
                    Duration::from_secs(3),
                    Duration::from_secs(2),
                    Duration::from_millis(400),
                    4096,
                )
                    .await
                {
                    // 有直接返回的数据，优先解析
                    if buf.starts_with(b"SSH-") {
                        if let Ok(s) = std::str::from_utf8(&buf) {
                            banner = s.lines().next().unwrap_or("").to_string();
                            evidence.push("ssh-banner".to_string());
                            status = "开放".to_string();
                        }
                    } else if is_mysql_handshake(&buf) {
                        banner = extract_mysql_banner(&buf);
                        evidence.push(format!("mysql-handshake (len={})", buf.len()));
                        status = "开放".to_string();
                    } else if is_rdp_response(&buf) {
                        banner = extract_rdp_banner(&buf);
                        evidence.push("rdp-response".to_string());
                        status = "开放".to_string();
                    } else {
                        // 可能是 HTTP 或其它协议：交给 HTTP / 指纹探测
                        // fallback to raw ascii as banner
                        let preview = extract_banner_text(&buf);
                        banner = preview.clone();
                        evidence.push("initial-raw".to_string());
                        status = "开放".to_string();
                    }
                } else {
                    // connect failed or no banner; decide whether to attempt protocol-specific probes based on port
                    // 尝试特定端口的 probe (顺序按可能性)
                    let addr_for_probe = format!("{}:{}", ip_cloned, port);
                    // Try Postgres (default 5432)
                    let mut probe_done = false;
                    if !probe_done && (port == 5432 || port == 5433) {
                        if let Some(p) = probe_postgres(&addr_for_probe).await {
                            banner = p.clone();
                            evidence.push("postgres-sslrequest".to_string());
                            status = "开放".to_string();
                            probe_done = true;
                        }
                    }
                    // Try MongoDB (27017)
                    if !probe_done && (port == 27017) {
                        if let Some(p) = probe_mongo(&addr_for_probe).await {
                            banner = p.clone();
                            evidence.push("mongo-opquery".to_string());
                            status = "开放".to_string();
                            probe_done = true;
                        }
                    }
                    // Try Redis (6379)
                    if !probe_done && (port == 6379) {
                        if let Ok(stream) = tokio::time::timeout(Duration::from_secs(3), TcpStream::connect(&addr_for_probe)).await {
                            if let Ok(s) = stream {
                                if let Some(p) = probe_redis(s).await {
                                    banner = p.clone();
                                    evidence.push("redis-ping".to_string());
                                    status = "开放".to_string();
                                    probe_done = true;
                                }
                            }
                        }
                    }
                    // Try SSH (22)
                    if !probe_done && port == 22 {
                        if let Ok(stream) = tokio::time::timeout(Duration::from_secs(3), TcpStream::connect(&addr_for_probe)).await {
                            if let Ok(s) = stream {
                                if let Some(p) = probe_ssh_banner(s).await {
                                    banner = p.clone();
                                    evidence.push("ssh-banner".to_string());
                                    status = "开放".to_string();
                                    probe_done = true;
                                }
                            }
                        }
                    }

                    // 若上面没有识别，尝试 HTTP probe（对常见 web 端口）
                    if !probe_done && (port == 80 || port == 8080 || port == 8000 || port == 8888 || port == 443 || port == 8443 || port == 3000) {
                        if let Ok(stream) = tokio::time::timeout(Duration::from_secs(3), TcpStream::connect(&addr_for_probe)).await {
                            if let Ok(_s) = stream {
                                if let Some((h, ev)) = probe_http_services_connect(&ip_cloned, port, &fps).await {
                                    banner = h.clone();
                                    evidence.extend(ev);
                                    status = "开放".to_string();
                                    probe_done = true;
                                }
                            }
                        }
                    }

                    // 如果仍然没有识别，尝试通用 connect + small probes (SMTP/FTP/POP3)
                    if !probe_done {
                        if let Ok(stream) = tokio::time::timeout(Duration::from_secs(3), TcpStream::connect(&addr_for_probe)).await {
                            if let Ok(s) = stream {
                                // FTP
                                if let Some(p) = probe_ftp(s).await {
                                    banner = p.clone();
                                    evidence.push("ftp-banner".to_string());
                                    status = "开放".to_string();
                                    // probe_done = true;
                                }
                            }
                        }
                    }
                } // end else (no immediate banner)

                // 如果初始解析显示开放则 final open
                if status == "开放" && banner.trim().is_empty() {
                    banner = "开放 服务未知".to_string();
                }

                if status == "开放" {
                    progress.println(format!("{} => {:<5} | 开放 | 服务: {} | 证据: {:?}", ip_cloned, port, banner, evidence));
                }

                // push result
                {
                    let mut results = result_arc.lock().await;
                    results.push(PortScanResult {
                        ip: ip_cloned,
                        port,
                        status,
                        banner,
                        evidence,
                    });
                }

                progress.inc();
            }));
        }
    }

    // await tasks
    while let Some(_) = tasks.next().await {}

    progress.finish();

    let results = Arc::try_unwrap(result_arc).unwrap().into_inner();

    if args.output {
        save_to_excel(
            &results,
            &["IP地址", "端口", "状态", "服务", "证据"],
            |r| {
                vec![
                    r.ip.clone(),
                    r.port.to_string(),
                    r.status.clone(),
                    r.banner.clone(),
                    r.evidence.join("; "),
                ]
            },
            "portscan",
            "portscan",
        )?;
    }

    let elapsed = start.elapsed();
    println!(
        "✅ 扫描完成，共发现 {} 个开放端口",
        results.iter().filter(|r| r.status == "开放").count()
    );
    println!("⏱️ 总耗时：{elapsed:.2?}");

    Ok(())
}
