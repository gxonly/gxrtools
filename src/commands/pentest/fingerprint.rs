use serde::Deserialize;
use std::fs;
use std::path::Path;

#[derive(Debug, Deserialize, Clone)]
pub struct Probe {
    pub path: String,
    pub method: String,             // "GET" 或 "HEAD"
    pub priority: u8,               // 数字越小优先
    pub match_headers: Vec<String>, // 需匹配的响应头
    pub match_body: Vec<String>,    // 需匹配的响应体
    pub max_read: usize,            // 读取最大字节数
}

#[derive(Debug, Deserialize, Clone)]
pub struct Fingerprint {
    pub name: String,
    pub ports: Vec<u16>,    // 适用端口（为空则不限）
    pub probes: Vec<Probe>, // 该服务的探针集合
}

pub fn load_fingerprints<P: AsRef<Path>>(path: P) -> anyhow::Result<Vec<Fingerprint>> {
    let data = fs::read_to_string(&path)?;
    let ext = path.as_ref().extension().and_then(|s| s.to_str()).unwrap_or("");

    if ext.eq_ignore_ascii_case("yaml") || ext.eq_ignore_ascii_case("yml") {
        Ok(serde_yaml::from_str(&data)?)
    } else {
        Ok(serde_json::from_str(&data)?)
    }
}
